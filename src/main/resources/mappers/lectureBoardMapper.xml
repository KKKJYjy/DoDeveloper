<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dodeveloper.mappers.lectureBoardMapper">

	<!-- 전체 게시판 조회 + 페이징 - 게시판에 게시글 조회 -->
	<select id="getAllBoard"
		resultType="com.dodeveloper.lecture.vodto.LectureBoardVO">
		select lecNo, lecTitle, lecWriter, lecLikeCount,
		lecReadCount, lecPostDate, lecScore
		from lectureBoard order by lecPostDate desc limit
		#{startRowIndex},
		#{viewPostCntPerPage};
	</select>

	<!-- ?번 글을 가져오는 쿼리문 -->
	<select id="selectBoardLecNo" resultType="LectureBoardVO">
		select * from
		lectureBoard where lecNo = #{lecNo}
	</select>

	<!-- ?번 글을 ?유저가 조회했다는 이력을 기록하는 쿼리문 -->
	<insert id="insertReadCountProcess">
		insert into readCount(readWho, boardNo, bType)
		values(#{user}, #{lecNo}, 1);
	</insert>

	<!-- 유저가 ?번 글을 언제 읽었는지 select하는 쿼리문 -->
	<select id="getDateDiff" resultType="int">
		select ifnull(a.diff, -1) as
		datediff from
		(select datediff(now(),
		(select readWhen from readCount
		where bType = 1 and readWho=#{user} and
		boardNo=#{lecNo} order by
		readNo desc limit 1))
		as diff) a
	</select>

	<!-- ?번 글의 조회수를 증가하는 쿼리문 -->
	<update id="updateReadCount">
		update lectureBoard set lecReadCount = lecReadCount +
		1 where lecNo = #{lecNo} and bType = 1;
	</update>

	<!-- 유저가 작성한 글을 insert하는 쿼리문 -->
	<insert id="insertLectureBoard">
		insert into lectureBoard(bType,
		lecTitle, lecReview, lecWriter,
		lecScore, lecLink)
		values(1,
		#{lecTitle}, #{lecReview}, #{lecWriter}, #{lecScore},
		#{lecLink})
	</insert>

	<!-- 유저가 작성한 글을 수정(update)하는 쿼리문 -->
	<update id="updateLectureBoard">
		update lectureBoard set lecTitle = #{lecTitle},
		lecReview = #{lecReview}, lecScore = #{lecScore}, lecLink = #{lecLink}
		where lecNo = #{lecNo} and bType = 1;
	</update>

	<!-- 유저가 게시글 삭제(delete)하는 쿼리문 -->
	<delete id="deleteLectureBoard">
		delete from lectureBoard where lecNo = #{lecNo} and
		bType = 1;
	</delete>

	<!-- 검색어가 없을 경우 게시글 전체 글 갯수를 얻어오는 쿼리문 - 검색조건 -->
	<!-- 검색 필터를 클릭했을 시에 조건에 맞는 글의 갯수를 가져오는 쿼리문 - 검색 필터 -->
	<!-- 중복 코드여서 같이 사용 -->
	<select id="getTotalLectureBoard" resultType="int">
		select count(*) as
		totalPostCnt from lectureBoard
	</select>

	<!-- 검색어가 있을 경우 검색된 글의 갯수를 가져오는 쿼리문 - 검색조건 -->
	<select id="getLectureBoardCntWithSc" resultType="int">
		select count(*) from lectureBoard
		<choose>
			<when test="searchType == 'lecTitle'">where lecTitle like
				#{searchValue}
			</when>
			<otherwise>
				where lecWriter like #{searchValue}
			</otherwise>
		</choose>
	</select>

	<!-- 검색어가 있을 경우 검색된 글을 가져오는 쿼리문 + 페이징 - 검색조건 -->
	<select id="getLectureBoardListWithSc"
		resultType="LectureBoardVO">
		select * from lectureBoard
		<choose>
			<when test="searchType == 'lecTitle'">where lecTitle like
				#{searchValue}
			</when>
			<otherwise>
				where lecWriter like #{searchValue}
			</otherwise>
		</choose>
		order by lecNo desc limit #{startRowIndex}, #{viewPostCntPerPage}
	</select>

	<!-- 검색 필터를 클릭했을 시에 조건에 맞는 글의 갯수를 가져오는 쿼리문 - 검색 필터
	<select id="lectureBoardCntFilter" resultType="int">
		select count(*) from lectureBoard
	</select> -->

	<!-- 검색 필터를 클릭했을 시에 조건에 맞는 글을 가져오는 쿼리문 + 페이징 - 검색 필터 -->
	<select id="getLectureBoardListFilter"
		resultType="LectureBoardVO">
		select * from lectureBoard
		<choose>
			<when test="filterType == 'latest'">order by lecPostDate desc</when>
			<when test="filterType == 'popular'">order by lecLikeCount desc</when>
			<when test="filterType == 'view'">order by lecReadCount desc</when>
			<when test="filterType == 'starScore'">order by lecScore desc</when>
		</choose>
		limit #{startRowIndex}, #{viewPostCntPerPage}
	</select>

	<!-- 검색 조건과 검색 필터를 동시에 클릭 했을 시에 맞는 글의 갯수를 가져오는 쿼리문 + 페이징 -->
	<select id="getLectureBoardSearchAndFilterCnt" resultType="int">
		select count(*) from lectureBoard
		<where>
			<if test="searchType != null and searchValue != null">
				<choose>
					<when test="searchType == 'lecTitle'">lecTitle like #{searchValue}</when>
					<when test="searchType == 'lecWriter'">lecWriter like #{searchValue}</when>
				</choose>
			</if>
			<if test="filterType != null">
				<choose>
					<when test="filterType == 'latest'">lecPostDate</when>
					<when test="filterType == 'popular'">lecLikeCount</when>
					<when test="filterType == 'view'">lecReadCount</when>
					<when test="filterType == 'starScore'">lecScore</when>
				</choose>
			</if>
		</where>
	</select>

	<!-- 검색 조건과 검색 필터를 동시에 클릭 했을 시에 맞는 글을 가져오는 쿼리문 + 페이징 -->
	<select id="getLectureBoardSearchAndFilter"
		resultType="LectureBoardVO">
		select * from lectureBoard
		<where>
			<if test="searchType != null and searchValue != ''">
				<choose>
					<when test="searchType == 'lecTitle'">lecTitle like #{searchValue}</when>
					<when test="searchType == 'lecWriter'">lecWriter like #{searchValue}</when>
				</choose>
			</if>
		</where>
		<if test="filterType != null and filterType != ''">
			order by
			<choose>
				<when test="filterType == 'latest'">lecPostDate desc</when>
				<when test="filterType == 'popular'">lecLikeCount desc</when>
				<when test="filterType == 'view'">lecReadCount desc</when>
				<when test="filterType == 'starScore'">lecScore desc</when>
			</choose>
		</if>
		limit #{startRowIndex}, #{viewPostCntPerPage}
	</select>

	<!-- 유저가 게시글에 하트를 눌렀는지 안눌렀는지 확인하는 쿼리문 -->
	<select id="selectLikeBoard" resultType="int">
		select count(*) from
		lectureLikeInfo where lecLikeUser = #{user} and lecNo = #{lecNo}
	</select>

	<!-- 유저가 게시글에 하트를 눌렀을 경우 insert 되는 쿼리문 -->
	<insert id="insertLikeBoard">
		insert into lectureLikeInfo(lecNo, lecLikeUser)
		values(#{lecNo}, #{user})
	</insert>

	<!-- 페이지에 좋아요 횟수 update -->
	<update id="updateLikeCount">
		update lectureBoard set lecLikeCount = lecLikeCount +
		1 where lecNo = #{lecNo}
	</update>

	<!-- 유저가 게시글에 하트를 한 번 더 눌렀을 경우 delete 되는 쿼리문 -->
	<delete id="deleteLikeBoard">
		delete from lectureLikeInfo where lecNo = #{lecNo}
		and lecLikeUser = #{user}
	</delete>

	<!-- 유저가 게시글 하트를 한번 더 눌렀을 경우 좋아요 횟수 down하는 update -->
	<update id="updateLikeDownCount">
		update lectureBoard set lecLikeCount = lecLikeCount
		-1 where lecNo = #{lecNo}
	</update>
	
	<!-- 유저가 스크랩을 누른적이 있는지 조회 (스크랩 눌렀을 경우 1반환) -->
	<select id="selectAllLectureScrap" resultType="int">
		select count(*) from scrap where scrapId = #{user} and scrapBoard = #{lecNo}
	</select>
	
	<!-- 스크랩을 한 번 눌렀을 경우 insert 되는 쿼리문 -->
	<insert id="insertScrap">
		insert into scrap(scrapBoard, scrapId, bType) values(#{lecNo}, #{user}, 1)
	</insert>
	
	<!-- 스크랩을 한 번 눌렀을 경우 스크랩 횟수 update -->
	<update id="updateUpScrap">
		update lectureBoard set scrap = scrap + 1 where lecNo = #{lecNo} and bType = 1
	</update>

	<!-- 스크랩을 취소 할 경우 delete 되는 쿼리문 -->
	<delete id="deleteScrap">
		delete from scrap where scrapBoard = 46 and scrapId = #{user}
	</delete>

	<!-- 스크랩을 한 번 눌렀을 경우 스크랩 횟수 down하는 update -->
	<update id="updateDownScrap">
		update lectureBoard set scrap = scrap - 1 where lecNo = #{lecNo} and bType = 1
	</update>

</mapper>